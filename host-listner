#!/usr/bin/env python
import channel
import sys
import os
from db import DB
import datetime
import random

host_id = sys.argv[1]
queue_prefix="hypervisor_"
queue_name = queue_prefix + host_id
vm_list = {}
vm_to_process_file_map = {}
qemu_command = "fake-qemu-kvm"

def get_vm_processes():
    cmd = "ps -C " + qemu_command
    prlist = os.popen(cmd).read().split("\n")[1:][:-1]
    for prc in prlist:
        pid = prc.split()[0]
        cmd =" ps -p " + pid + " -o cmd h"
        prdetails = os.popen(cmd).read().split(qemu_command)[1]
        vmid = prdetails.split("instance-")[1].split()[0]
        
        if vmid in vm_list:
            vm_to_process_file_map[vmid]= {}
            vm_to_process_file_map[vmid]['pid'] = pid
            disk_file = "/var/lib/nova/instances/"+vmid+"/disk" ## fake disk file
            vm_to_process_file_map[vmid]['disk'] = disk_file
            

def get_process_util(pid):
    cmd= "ps -p" + str(pid) + " -o %cpu,%mem"
    return os.popen(cmd).read().split("\n")[1].strip().split()
    

def get_vm_list():
    global vm_list
    db = DB()
    cur = db.retrieve({'hypervisor':int(host_id)})
    for item in cur:
        vm_list[item['_id']] = item['sim']

def change_stat(stat):
    value  = 10
    try:
        value = float(stat)
    except:
        pass
    variation = value / 10
    variation *=  random.random()
    if (random.random() > 0.5):
        value += variation
    else:
        value -= variation
    return value
    

"""
Mock Function to get simulated data
"""
def get_mock_stat(vmid):
    stats = vm_list[vmid]
    
    mod_stat = {}
    for stat in stats:
        mod_stat[stat] = change_stat(stats[stat])
    return mod_stat

"""
Based on process ID and disk file location, utilizations can be mapped to the VM.

Disk Utilizations will be accurate from some agent inside the instance.
"""
def get_stat(vmid):
    pid = vm_to_process_file_map[vmid]["pid"]
    
    cpu_percent,mem_percent = get_process_util(pid)
    disk_size = os.path.getsize(vm_to_process_file_map[vmid]["disk"])
    vm_allocate_disk_size = None # Get actual space from nova apis
    disk_percent = disk_size / vm_allocate_disk_size * 100.0

    stat = {}
    stat['diskutil'] = disk_percent
    stat['cpuutil'] = cpu_percent
    stat['memutil'] = mem_percent
    
    return stat

def store_stats():
    mondb = DB(collection="monitor")
    for vmid in vm_list:
        #stat = get_stat(vmid)
        stat = get_mock_stat(vmid)
        stat['date'] = str(datetime.datetime.now())
        stat['vmid'] = vmid
        mondb.store(stat)

def callback(ch, method, properties, body):
    if "sendStats" == body:
        store_stats()
    elif "stop" == body:
        os._exit(0)

if __name__ == "__main__":
    get_vm_list()
    #get_vm_processes()
    channel.listenChannel(queue_name,callback)




