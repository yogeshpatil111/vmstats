#!/usr/bin/env python
import sys
import os
import random
import string
from optparse import OptionParser
import channel
import time
from db import DB

qemu_cmd_args = open("qemu_cmd_args.txt").read()
qemu_command = "fake-qemu-kvm"

def main(argv):
    parser = OptionParser(usage="usage: %prog --vmcount <count> [options]")
    parser.add_option("-c", "--vmcount", action="store", dest="vmcount",type="int",
                      help="Number of VMs")
    parser.add_option("-r", "--ratio", action="store", dest="hvmratio",
                      default=10,type="int",help="Number of VMs in each Hypervisor. Default 10")

    (options, args) = parser.parse_args()

    if not options.vmcount:
        print "vmcount is mandatory"
        parser.print_help()
        exit(-1)

    vmcount = options.vmcount
    hvmratio = options.hvmratio
    channel.createChannel()

    db = DB(collection=None)
    db.dropCollection()
    db.dropCollection(collection="monitor")
    db.createCollection(collection="monitor")
    db.createCollection()

    vmlist = []

    #This will work fine with vmcount % hvmratio = 0. Other condition needs to be handled.    
    hypervisor = int(vmcount/hvmratio)

    ## Create VMs and VM DBs    
    for i in xrange(hypervisor):
        for j in xrange(hvmratio):
            vmid = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(8))
            vmmap = {}
            vmmap['_id'] = vmid
            vmmap['hypervisor'] = i
            
            utilrand = random.random() * 10
            cpuutil = str(utilrand + 5 + random.random())
            memutil = str(utilrand + 7 - random.random())
            diskutil = str(utilrand + 6 + random.random())
            vmmap['sim'] = {'cpuutil' : cpuutil, 'memutil': memutil, 'diskutil' : diskutil}
            
            vmlist.append(vmmap)
            
            vmcommand = "./" + qemu_command + " " + qemu_cmd_args.replace("instance-00000001","instance-"+vmid) + " > /dev/null 2>&1 &"
            os.system(vmcommand)

    db.store(vmlist)
    time.sleep(1)

    ## Start hypervisor comminucation channels
    for i in xrange(hypervisor):
        channel.subscribeChannel("hypervisor_"+str(i))
        os.system("./host-listner "+str(i) + " &")

if __name__ == "__main__":
    main(sys.argv)
    
